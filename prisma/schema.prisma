// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  name      String
  lastName  String     @map("last_name")
  email     String     @unique
  avatarUrl String     @map("avatar_url")
  employees Employee[]
}

model Organization {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  employees Employee[]
  spaces   Space[]
}

model Employee {
  id             Int              @id @default(autoincrement())
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int              @map("user_id")
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId Int              @map("organization_id")
  bookings       UsersOfBooking[]
}

model Space {
  id             Int          @id @default(autoincrement())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId Int          @map("organization_id")
  capacity       Int
  min_capacity   Int?
  bookings       Booking[]
}

model Booking {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  bookingType BookingType      @map("booking_type")
  space       Space            @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId     Int              @map("space_id")
  fromTime    DateTime         @map("from_time")
  toTime      DateTime         @map("to_time")
  repeat      RepeatType
  end_by      DateTime?
  users       UsersOfBooking[]
}

model UsersOfBooking {
  id        Int      @id @default(autoincrement())
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId Int      @map("booking_id")
  user      Employee @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @map("user_id")

}

enum BookingType {
  userBooking
  internalUse
  unavailable
}

enum RepeatType {
  none
  daily
  weekly
  monthly
  yearly
}
