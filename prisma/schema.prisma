// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id
  name      String
  lastName  String        @map("last_name")
  email     String        @unique
  avatarUrl String        @map("avatar_url")
  admin     Boolean
  createdAt DateTime      @default(now()) @map("created_at")
  bookings  BookingUser[]
  spaces    Space[]
}

model Space {
  id              Int       @id @default(autoincrement())
  name            String    @unique()
  capacity        Int
  minCapacity     Int?      @map("min_capacity")
  timeRestriction Int?      @map("time_restriction")
  createdAt       DateTime  @default(now()) @map("created_at")
  creator         User?     @relation(fields: [createdBy], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy       String    @map("created_by")
  bookings        Booking[]
}

model Booking {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  bookingType BookingType   @map("booking_type")
  space       Space?        @relation(fields: [spaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  spaceId     Int           @map("space_id")
  fromTime    DateTime      @map("from_time")
  toTime      DateTime      @map("to_time")
  repeat      RepeatType
  end_by      DateTime?
  users       BookingUser[]
}

model BookingUser {
  id        Int      @id @default(autoincrement())
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId Int      @map("booking_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @map("user_id")
}

enum BookingType {
  userBooking
  internalUse
  unavailable
}

enum RepeatType {
  none
  daily
  weekly
  monthly
  yearly
}
